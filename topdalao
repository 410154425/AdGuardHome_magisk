#!/system/bin/sh
MODDIR=${0%/*}
AdGuardHome_sh="$(ps -ef | egrep 'AdGuardHome' | egrep -v 'egrep')"
if [ "$AdGuardHome_sh" = "" ]; then
	sleep 3
	AdGuardHome_sh="$(ps -ef | egrep 'AdGuardHome' | egrep -v 'egrep')"
	if [ "$AdGuardHome_sh" = "" ]; then
	sed -i 's/^#!\/system\/bin\/sh.*//g' "$MODDIR/topdalao" >/dev/null 2>&1
	sed -i 's/\[.*\]/\[ 未启动，请稍等！！！如果长时间未启动，则是系统不支持相关命令，或是相关命令被占用锁定，请尝试重启或逐个排查模块冲突 \]/g' "$MODDIR/module.prop" >/dev/null 2>&1
	iptables -t nat -F TOPHOME
	exit 0
	fi
fi
AdGuardHome_id="$(echo "$AdGuardHome_sh" | egrep 'AdGuardHome' | egrep -v 'sh|topdalao|up|cat|ps|curl|sed|netstat|sleep|chmod|dumpsys|echo|getprop|iptables|kill|head|grep|egrep' | wc -l)"
AdGuardHome_pid="$(echo "$AdGuardHome_sh" | egrep 'AdGuardHome' | egrep -v 'sh|topdalao|up|cat|ps|curl|sed|netstat|sleep|chmod|dumpsys|echo|getprop|iptables|kill|head|grep|egrep' | sed -n 's/[ ][ ]*/ /g;s/^root//g;s/^ //g;s/ .*//g;$p')"
if [ -f "$MODDIR/disable" ]; then
	iptables -t nat -F TOPHOME
	if [ "$AdGuardHome_id" != "0" ]; then
		sed -i 's/\[.*\]/\[ 已关闭过滤 \]/g' "$MODDIR/module.prop" >/dev/null 2>&1
		if [ "$AdGuardHome_pid" -gt "1" ]; then
			kill "$AdGuardHome_pid" >/dev/null 2>&1
			sed -i 's/\[.*\]/\[ 已关闭过滤、已关闭主程序 \]/g' "$MODDIR/module.prop" >/dev/null 2>&1
		fi
	fi
	exit 0
fi
if [ "$AdGuardHome_id" != "1" ]; then
	if [ "$AdGuardHome_id" = "0" ]; then
		AdGuardHome_byte="$(cat "$MODDIR/AdGuardHome" | wc -c)"
		if [ "$AdGuardHome_byte" -lt "15000000" ]; then
			sed -i "s/\[.*\]/\[ AdGuardHome文件过小($AdGuardHome_byte字节)，可能安装时解压出错，请重新安装本模块 \]/g" "$MODDIR/module.prop" >/dev/null 2>&1
		else
			uname_m="$(uname -m)"
			sed -i "s/\[.*\]/\[ 主程序未启动，请稍等！！！如果长时间未启动，则是AdGuardHome.yaml文件错误，或是AdGuardHome文件与系统架构$uname_m不匹配 \]/g" "$MODDIR/module.prop" >/dev/null 2>&1
		fi
		iptables -t nat -F TOPHOME
		"$MODDIR/AdGuardHome" > /dev/null 2>&1 &
		exit 0
	else
		if [ "$AdGuardHome_pid" -gt "1" ]; then
			kill "$AdGuardHome_pid" >/dev/null 2>&1
			sed -i 's/\[.*\]/\[ 正在关闭多余的主程序，请稍等！！！ \]/g' "$MODDIR/module.prop" >/dev/null 2>&1
			iptables -t nat -F TOPHOME
			exit 0
		fi
	fi
fi
if [ -f "$MODDIR/AdGuardHome.yaml" ]; then
	AdHome_yaml="$(cat "$MODDIR/AdGuardHome.yaml" | egrep 'parental_enabled: true|safesearch_enabled: true|safebrowsing_enabled: true')"
	if [ "$AdHome_yaml" != "" ]; then
		sed -i 's/parental_enabled: true/parental_enabled: false/g' "$MODDIR/AdGuardHome.yaml" >/dev/null 2>&1
		sed -i 's/safesearch_enabled: true/safesearch_enabled: false/g' "$MODDIR/AdGuardHome.yaml" >/dev/null 2>&1
		sed -i 's/safebrowsing_enabled: true/safebrowsing_enabled: false/g' "$MODDIR/AdGuardHome.yaml" >/dev/null 2>&1
		if [ "$AdGuardHome_pid" -gt "1" ]; then
			iptables -t nat -F TOPHOME
			kill "$AdGuardHome_pid" >/dev/null 2>&1
			sed -i 's/\[.*\]/\[ 主程序重启，请稍等！！！ \]/g' "$MODDIR/module.prop" >/dev/null 2>&1
			exit 0
		fi
	fi
else
	sed -i 's/\[.*\]/\[ 配置文件AdGuardHome.yaml不存在 \]/g' "$MODDIR/module.prop" >/dev/null 2>&1
	iptables -t nat -F TOPHOME
	exit 0
fi
NetworkAgentInfo="$(dumpsys connectivity | egrep 'NetworkAgentInfo{' | egrep -v 'ims')"
if [ "$NetworkAgentInfo" = "" ]; then
	exit 0
fi
AdHome_netstat="$(netstat -anp | egrep 'AdGuardHome')"
if [ "$AdHome_netstat" = "" ]; then
	hosts_byte="$(cat '/system/etc/hosts' | wc -c)"
	if [ "$hosts_byte" -gt "1024" ]; then
		sed -i "s/\[.*\]/\[ AdHome端口未启动，请稍等！！！如果长时间未启动，请关闭hosts相关的模块或删除\/system\/etc\/hosts($hosts_byte字节)文件后再试，可使用AdHome订阅hosts规则 \]/g" "$MODDIR/module.prop" >/dev/null 2>&1
	else
		sed -i 's/\[.*\]/\[ AdHome端口未启动，请稍等！！！如果长时间未启动，则可能与其它模块冲突，请逐个关闭排查 \]/g' "$MODDIR/module.prop" >/dev/null 2>&1
	fi
	iptables -t nat -F TOPHOME
	exit 0
fi
Network="$(echo "$NetworkAgentInfo" | egrep 'type: WIFI')"
if [ "$Network" != "" ]; then
	WIFI_Dns="$(echo "$Network" | egrep 'type: WIFI' | egrep -v 'type: VPN' | sed -n 's/.*DnsAddresses: \[//g;s/\].*//g;s/ //g;p')"
	if [ "$WIFI_Dns" = "" ]; then
		Network="$(echo "$NetworkAgentInfo" | egrep 'NetworkAgentInfo{' | egrep -v 'type: WIFI|ims')"
	fi
else
	Network="$NetworkAgentInfo"
fi
HostDns="$(echo "$Network" | egrep 'NetworkAgentInfo{' | egrep -v 'type: VPN' | sed -n 's/.*DnsAddresses: \[//g;s/\].*//g;s/ //g;s/\///g;s/,/\\n/g;p')"
HostDns_1="$(echo -e "$HostDns" | egrep -v ':' | sed -n '1p')"
mode="$(cat "$MODDIR/mode.conf" | egrep '^mode=' | sed -n 's/.*=//g;p')"
if [ "$HostDns_1" = "" -o "$mode" = "2" ]; then
	natTOPHOME="$(iptables -t nat -n -L TOPHOME)"
	TOPHOME_HostDns="$(echo "$natTOPHOME" | egrep '10.35.53.10' | wc -l)"
	TOPHOME_HostVPN="$(echo "$natTOPHOME" | egrep '127.0.0.1:9' | wc -l)"
	if [ "$natTOPHOME" != "" ]; then
		if [ "$TOPHOME_HostDns" != "3" -o "$TOPHOME_HostVPN" != "1" ]; then
			iptables -t nat -F TOPHOME
			iptables -t nat -A TOPHOME ! -d 10.35.53.10 -p udp --dport 53 -j DNAT --to-destination 127.0.0.1:5555
			iptables -t nat -A TOPHOME ! -d 10.35.53.10 -p tcp --dport 53 -j DNAT --to-destination 127.0.0.1:5555
			iptables -t nat -A TOPHOME -d 10.35.53.10 -p udp --dport 3553 -j DNAT --to-destination 127.0.0.1:9
			sed -i 's/\[.*\]/\[ 模式2 运行中 \]/g' "$MODDIR/module.prop" >/dev/null 2>&1
		fi
	else
		iptables -t nat -N TOPHOME
	fi
else
	HostVPN="$(echo "$NetworkAgentInfo" | egrep 'type: VPN')"
	if [ "$HostVPN" != "" ]; then
		natTOPHOME="$(iptables -t nat -n -L TOPHOME)"
		TOPHOME_HostDns="$(echo "$natTOPHOME" | egrep "$HostDns_1" | wc -l)"
		TOPHOME_HostVPN="$(echo "$natTOPHOME" | egrep '127.0.0.1:9' | wc -l)"
		if [ "$natTOPHOME" != "" ]; then
			if [ "$TOPHOME_HostDns" != "2" -o "$TOPHOME_HostVPN" != "1" ]; then
				iptables -t nat -F TOPHOME
				HostDns_2="$(echo -e "$HostDns" | egrep -v ':' | sed -n '2p')"
				if [ "$HostDns_2" != "" -a "$HostDns_2" != "$HostDns_1" ]; then
					iptables -t nat -A TOPHOME -d "$HostDns_2" -p udp --dport 53 -j DNAT --to-destination 127.0.0.1:5555
					iptables -t nat -A TOPHOME -d "$HostDns_2" -p tcp --dport 53 -j DNAT --to-destination 127.0.0.1:5555
				fi
				iptables -t nat -A TOPHOME -d "$HostDns_1" -p udp --dport 53 -j DNAT --to-destination 127.0.0.1:5555
				iptables -t nat -A TOPHOME -d "$HostDns_1" -p tcp --dport 53 -j DNAT --to-destination 127.0.0.1:5555
				iptables -t nat -A TOPHOME -d 10.35.53.10 -p udp --dport 3553 -j DNAT --to-destination 127.0.0.1:9
				sed -i 's/\[.*\]/\[ 模式1+VPN 运行中 \]/g' "$MODDIR/module.prop" >/dev/null 2>&1
			fi
		else
			iptables -t nat -N TOPHOME
		fi
	else
		natTOPHOME="$(iptables -t nat -n -L TOPHOME)"
		TOPHOME_HostDns="$(echo "$natTOPHOME" | egrep "$HostDns_1" | wc -l)"
		TOPHOME_HostVPN="$(echo "$natTOPHOME" | egrep "$HostDns_1:53" | wc -l)"
		if [ "$natTOPHOME" != "" ]; then
			if [ "$TOPHOME_HostDns" != "3" -o "$TOPHOME_HostVPN" != "1" ]; then
				iptables -t nat -F TOPHOME
				HostDns_2="$(echo -e "$HostDns" | egrep -v ':' | sed -n '2p')"
				if [ "$HostDns_2" != "" -a "$HostDns_2" != "$HostDns_1" ]; then
					iptables -t nat -A TOPHOME -d "$HostDns_2" -p udp --dport 53 -j DNAT --to-destination 127.0.0.1:5555
					iptables -t nat -A TOPHOME -d "$HostDns_2" -p tcp --dport 53 -j DNAT --to-destination 127.0.0.1:5555
				fi
				iptables -t nat -A TOPHOME -d "$HostDns_1" -p udp --dport 53 -j DNAT --to-destination 127.0.0.1:5555
				iptables -t nat -A TOPHOME -d "$HostDns_1" -p tcp --dport 53 -j DNAT --to-destination 127.0.0.1:5555
				iptables -t nat -A TOPHOME -d 10.35.53.10 -p udp --dport 3553 -j DNAT --to-destination "$HostDns_1:53"
				sed -i 's/\[.*\]/\[ 模式1 运行中 \]/g' "$MODDIR/module.prop" >/dev/null 2>&1
			fi
		else
			iptables -t nat -N TOPHOME
		fi
	fi
fi
natOUTPUT="$(iptables -t nat -n -L OUTPUT)"
nat_OUTPUT="$(echo "$natOUTPUT" | egrep 'TOPHOME' | wc -l)"
nat_OUTPUT_1="$(echo "$natOUTPUT" | sed -n '3p' | egrep 'TOPHOME' | wc -l)"
if [ "$natOUTPUT" != "" ]; then
	if [ "$nat_OUTPUT" != "1" -o "$nat_OUTPUT_1" != "1" ]; then
		until [ "$nat_OUTPUT" = "0" ] ; do
			iptables -t nat -D OUTPUT -j TOPHOME
			nat_OUTPUT="$(( $nat_OUTPUT - 1 ))"
		done
		iptables -t nat -I OUTPUT -j TOPHOME
	fi
fi
ipv6OUTPUT="$(ip6tables -t filter -n -L OUTPUT)"
ipv6_OUTPUT_tcp="$(echo "$ipv6OUTPUT" | egrep 'tcp' | egrep '53' | egrep 'REJECT' | wc -l)"
ipv6_OUTPUT_udp="$(echo "$ipv6OUTPUT" | egrep 'udp' | egrep '53' | egrep 'REJECT' | wc -l)"
ipv6_OUTPUT_n="$(echo "$ipv6OUTPUT" | sed -n '$p' | egrep 'udp' | egrep '53' | egrep 'REJECT' | wc -l)"
if [ "$ipv6OUTPUT" != "" ]; then
	if [ "$ipv6_OUTPUT_tcp" != "1" -o "$ipv6_OUTPUT_udp" != "1" -o "$ipv6_OUTPUT_n" != "1" ]; then
		ip6tables -t filter -D OUTPUT -p tcp --dport 53 -j DROP
		ip6tables -t filter -D OUTPUT -p udp --dport 53 -j DROP
		until [ "$ipv6_OUTPUT_tcp" = "0" ] ; do
			ip6tables -t filter -D OUTPUT -p tcp --dport 53 -j REJECT
			ipv6_OUTPUT_tcp="$(( $ipv6_OUTPUT_tcp - 1 ))"
		done
		until [ "$ipv6_OUTPUT_udp" = "0" ] ; do
			ip6tables -t filter -D OUTPUT -p udp --dport 53 -j REJECT
			ipv6_OUTPUT_udp="$(( $ipv6_OUTPUT_udp - 1 ))"
		done
		ip6tables -t filter -A OUTPUT -p tcp --dport 53 -j REJECT
		ip6tables -t filter -A OUTPUT -p udp --dport 53 -j REJECT
	fi
fi
#by topdalao
#version=2021122400
